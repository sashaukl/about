{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","class","Portfolio","About","Projects","_ref","match","react_router_dom","to","concat","url","react_router","path","component","Topic","exact","render","_ref2","params","topicId","BasicExample","basename","id","Boolean","window","location","hostname","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4f14296.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst BasicExample = () => (\n    <Router  basename='/github-router'>\n\t<div class=\"container-fluid snip1189\" id=\"header-div\">\n        <div class=\"row\">\n\t\t\t<div class=\"col-1\">\n\t\t\t\t<NavLink  to=\"/\" >Home</NavLink >\n\t\t\t</div>\n\t\t\t<div class=\"col-1\">\n\t\t\t\t<NavLink  to=\"/portfolio\" >Portfolio</NavLink >\n\t\t\t</div>\n\t\t\t<a class=\"col-8\" id=\"creator-name\">UKOLOV ALEXANDR</a>\n\t\t\t<div class=\"col-1\">\n\t\t\t\t<NavLink  to=\"/projects\" >Projects</NavLink >\n\t\t\t</div>\n\t\t\t<div class=\"col-1\">\n\t\t\t\t<NavLink  to=\"/about\" >About</NavLink >\n\t\t\t</div>\n\t\t\t\t\n            <hr />\n\t\t</div>\n\t</div>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/portfolio\" component={Portfolio} />\n            <Route path=\"/projects\" component={Projects} />\n\t\t\t<Route path=\"/about\" component={About} />\n        \n\n    </Router >\n);\n\nconst Home = () => (\n    <div class=\"container-fluid\">\n\t\t<div class=\"row\">\n\t\t\t<h2>Home</h2>\n\t\t</div>\n\t</div>\n);\n\nconst Portfolio = () => (\n<div class=\"container-fluid\">\n    <div class=\"row\">\n        <h2>Portfolio</h2>\n    </div>\n</div>\n\t\n);\n\nconst About = () => (\n<div class=\"container-fluid\">\n    <div class=\"row\">\n        <h2>About</h2>\n    </div>\n</div>\n);\n\nconst Projects = ({ match }) => (\n    <div class=\"container-fluid\">\n        <h2>Topics</h2>\n        <ul>\n            <li>\n                <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n            </li>\n            <li>\n                <Link to={`${match.url}/components`}>Components</Link>\n            </li>\n            <li>\n                <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n            </li>\n        </ul>\n\n        <Route path={`${match.url}/:topicId`} component={Topic} />\n        <Route\n            exact\n            path={match.url}\n            render={() => <h3>Please select a topic.</h3>}\n        />\n    </div>\n);\n\nconst Topic = ({ match }) => (\n    <div>\n        <h3>{match.params.topicId}</h3>\n    </div>\n);\n\nexport default BasicExample;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}